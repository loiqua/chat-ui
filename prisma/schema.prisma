// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String    @id @default(uuid())
  username       String?   @unique
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  passwordHash   String?   // Champ pour stocker le hash du mot de passe
  createdAt      DateTime  @default(now())
  lastSeen       DateTime  @updatedAt

  accounts       Account[]
  sessions       Session[]

  memberships    ConversationMember[]
  messages       Message[]
  roles          UserRole[]
}

model Conversation {
  id             String   @id @default(uuid())
  type           ConversationType
  name           String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  members        ConversationMember[]
  messages       Message[]
}

model ConversationMember {
  id                  String       @id @default(uuid())
  conversation        Conversation @relation(fields: [conversationId], references: [id])
  conversationId      String
  user                User         @relation(fields: [userId], references: [id])
  userId              String
  joinedAt            DateTime     @default(now())
  lastReadMessageId   String?
  lastReadMessage     Message?     @relation(name: "LastReadMessage", fields: [lastReadMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  @@unique([conversationId, userId])
}

model Message {
  id             String         @id @default(uuid())
  conversation   Conversation   @relation(fields: [conversationId], references: [id])
  conversationId String
  sender         User           @relation(fields: [senderId], references: [id])
  senderId       String
  content        String
  timestamp      DateTime       @default(now())
  isDeleted      Boolean        @default(false)
  status         MessageStatus  @default(sent)

  readBy ConversationMember[] @relation("LastReadMessage")

  @@index([conversationId, timestamp])
}

model UserRole {
  id      String    @id @default(uuid())
  user    User      @relation(fields: [userId], references: [id])
  userId  String
  role    UserRoleType

  @@unique([userId, role])
}

enum ConversationType {
  DM
  GROUP
}

enum MessageStatus {
  sent
  delivered
  read
}

enum UserRoleType {
  USER
  ADMIN
}
